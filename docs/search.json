[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "CRM Data Pipeline",
    "section": "",
    "text": "CRM Data Pipeline: Automated Database Synchronization for Power BI\nProject Overview:\nThis Python script automates the daily ETL (Extract, Transform, Load) process for a PostgreSQL database that powers a CRM analytics dashboard in Power BI. It integrates data from multiple sources (APIs, Google Sheets, Excel) to provide real-time insights into sales pipelines, client classifications, and revenue tracking for a media advertising platform.\nKey Features:\n\nAutomated Data Synchronization:\n\nPulls data from the AdSim CRM API, Google Sheets, and local Excel files.\nIdentifies new records and updates existing ones using a diff-based approach (find_differences()).\nHandles 20+ relational tables (deals, organizations, products, etc.) with complex dependencies.\n\nData Quality & Integrity:\n\nRobust type conversion (e.g., Int64 for large IDs) and NULL/Nan handling.\nDynamic client classification (“New Client”, “Recurring”, “Seasonal”).\nCross-source validation (e.g., reconciling executive names between CRM and sales sheets).\n\nPerformance Optimizations:\n\nBatch SQL operations with psycopg2.extras.execute_batch.\nParallel processing for API calls and data transformations.\nIncremental updates (only processes changes from the last 45 minutes).\n\nMonitoring & Error Handling:\n\nDetailed logging with timestamps and operation status.\nJSON error reports saved to a reports/ directory.\nEmail-ready error summaries (via SMTP integration).\n\n\nTechnical Stack:\n\nPython Libraries:\n\npandas for data wrangling.\npsycopg2 and SQLAlchemy for PostgreSQL interactions.\ngspread for Google Sheets integration.\n\nAPIs: AdSim CRM API (REST/NDJSON).\nDatabase: PostgreSQL with optimized schemas for Power BI.\n\nMy Contributions:\n\nDesigned a scalable diff algorithm to minimize database writes by comparing API data with existing records.\nBuilt a client classification system using temporal logic (e.g., “Recurring” = deals within 18 months).\nImplemented data reconciliation rules for inconsistent sources (e.g., executive name mappings across 5+ platforms).\nReduced manual reporting effort by 90% through full automation.\n\nBusiness Impact:\n\nEnabled real-time tracking of 2 thousand monthly advertising deals.\nImproved sales executive management of CRM Pipeline.\nReduced data discrepancies between CRM and financial systems by 45%.\n\nCode Highlights:\n# Example of the diff-based update logic \ndef find_differences(df1, df2, id_column, columns_to_check):     \n\"\"\"Identifies rows to update/insert by comparing DataFrames.\"\"\"    \nmerged = pd.merge(df1, df2, on=id_column, how='outer', suffixes=('_old', '_new'))    \n# ... (handles NaN/NULL edge cases)    \nreturn {\"rows_to_update\": changed_rows, \"rows_to_insert\": new_rows}\nWhy This Project?\nDemonstrates my ability to:\n\nDesign end-to-end data pipelines for business intelligence.\nSolve real-world data consistency challenges (e.g., name mismatches, API limitations).\nBalance performance with data integrity in high-volume environments."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Guilherme Rodrigues",
    "section": "",
    "text": "CRM Data Pipeline\n\n\n\n\n\n\nproject\n\n\ncode\n\n\n\n\n\n\n\n\n\nMar 25, 2025\n\n\nGuilherme Rodrigues\n\n\n\n\n\n\n\n\n\n\n\n\nMonitor Flex Express\n\n\n\n\n\n\nproject\n\n\ncode\n\n\n\n\n\n\n\n\n\nOct 14, 2024\n\n\nGuilherme Rodrigues\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "I’m Guilherme, a Data Science undergraduate and Junior Data Analyst with hands-on experience in collecting and analyzing CRM and marketing data. My work spans across marketing and platform management, where I’ve applied my skills in SQL, Python, and data visualization to generate insights that inform decision-making and optimize performance.\n\nSince 2020, I’ve developed a strong foundation in data analysis, working with databases and programming to transform raw data into actionable insights. I’m continuously refining my expertise in data science, data analysis, and data engineering, with a focus on delivering impactful solutions that align with business goals.\n\nI’m always eager to learn and connect with professionals in data, technology, and analytics to collaborate on innovative projects. If you share a passion for leveraging data to solve complex problems, I’d love to connect and exchange ideas."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Monitor Flex Express",
    "section": "",
    "text": "Monitor Flex Express: Automated TV Advertising Data Processing Tool\nProject Overview:\nMonitor Flex Express is a Python-based application designed to automate the processing and analysis of TV advertising data. It streamlines the workflow for media monitoring by cleaning, categorizing, and generating detailed reports from raw Excel and HTML files. The tool integrates with Google Sheets for real-time data updates and provides customizable outputs for regional and client-specific insights.\nKey Features:\n\nData Processing:\n\nCleans and standardizes raw advertising data from multiple sources (Excel, HTML).\nCorrects mismatched client names, locations, and categories.\nFilters out irrelevant entries (e.g., radio, political campaigns).\n\nAutomated Reporting:\n\nGenerates pivot tables and segmented reports by region (e.g., Curitiba, Maringá).\nCalculates projected ad values with dynamic discounting logic.\nDistributes aggregated values evenly across unmatched records.\n\nGoogle Sheets Integration:\n\nPulls coverage and client data from Google Sheets for real-time validation.\nUses gspread and Google API for seamless authentication.\n\nUser-Friendly Interface:\n\nBuilt with PySimpleGUI for an intuitive file selection and configuration panel.\nDisays real-time progress updates during processing.\n\n\nTechnologies Used:\n\nPython Libraries:\n\npandas for data manipulation.\nopenpyxl for Excel file handling.\ngspread for Google Sheets integration.\nPySimpleGUI for the graphical interface.\n\nConcurrency: ThreadPoolExecutor for parallel file loading.\nError Handling: Robust validation for file paths, data types, and edge cases.\n\nMy Contributions:\n\nDesigned the data pipeline to handle heterogeneous input formats (Excel, HTML).\nImplemented dynamic discounting logic based on client, region, and ad type.\nDeveloped a mapping system to reconcile mismatched client names across datasets.\nOptimized performance with multithreading and memory-efficient operations.\n\nImpact:\n\nReduced manual data processing time by 90% for monthly reports.\nImproved accuracy by automating error-prone categorization tasks.\nEnabled regional teams to access tailored insights instantly.\n\nCode Repository:\ngit clone https://github.com/Guiermis/MonitorFlexExpress.git\n\nWhy This Project?\nThis tool showcases my ability to:\n\nSolve real-world business problems with automation.\nWork with diverse data sources and APIs.\nBalance usability with complex backend logic."
  },
  {
    "objectID": "posts/post-with-code/index.html#features",
    "href": "posts/post-with-code/index.html#features",
    "title": "Monitor Flex Express",
    "section": "Features",
    "text": "Features\n\nFast data transformation: Meets the requirements from our dashboards at Grupo Ric.\nMultiple report generation: Allows different analyses beyond just cleaning data for the dashboard.\nUser-friendly UI: Cool color scheme and easy-to-use interface."
  },
  {
    "objectID": "posts/post-with-code/index.html#planned-features",
    "href": "posts/post-with-code/index.html#planned-features",
    "title": "Monitor Flex Express",
    "section": "Planned Features",
    "text": "Planned Features\n\nGraphs generation: Automatically generate visualizations from the data.\nEmail reports: Create a text report that can be sent via email.\nExcel file appending: Append data to existing Excel files, streamlining data updates."
  },
  {
    "objectID": "posts/post-with-code/index.html#installation",
    "href": "posts/post-with-code/index.html#installation",
    "title": "Monitor Flex Express",
    "section": "Installation",
    "text": "Installation\n\nClone the repository:\ngit clone https://github.com/Guiermis/MonitorFlexExpress.git"
  },
  {
    "objectID": "posts/post-with-code/index.html#run-the-code",
    "href": "posts/post-with-code/index.html#run-the-code",
    "title": "Monitor Flex Express",
    "section": "Run the code:",
    "text": "Run the code:\npython FlexExpressMonitor.py \n\nFollow the instructions on the UI, including inserting values and selecting the file.\nThe program will handle the rest automatically, generating your report in no time!"
  }
]